require('logger').log('Gamesocket (Models): <-- Loading...')

var util = require('util'),
	Syncable = require('socketsyncr/shared').Syncable;


var QuadTree = require('gs/quadtree').QuadTree;

var World = exports.World = function(name) {
	
	Syncable.call(this)
	
	QuadTree = require('gs/quadtree').QuadTree
	
	this.name = name;
	
	this.critters = new QuadTree(-1000000,-1000000,1000000,1000000);
	this.critter_loc_by_id = {};
	this.critter_by_id = {};
	
	this.ground = new QuadTree(-1000000,-1000000,1000000,1000000);

}
util.inherits(World,Syncable);

World.prototype.toJSON = function() {
	obj = Syncable.prototype.toJSON.call(this);
	obj['name'] = this.name;
	return obj
}


World.prototype.ground_at = function(x,y) {
	return this.ground.get(x,y);
}

World.prototype.critter_at = function(x,y) {
	return this.critters.get(x,y);
}

World.prototype.add_critter = function(x,y,critter) {
	critter.world = this;
	
	this.critter_by_id[critter.id] = critter;
	
	this.critters.set(x,y,critter);
	this.critter_loc_by_id[critter.id] = [x,y];
	
	this.emit('critter_add',x,y,critter)
	this.emit('change')
}

World.prototype.move_critter = function(x,y,to_x,to_y) {
	c = this.critters.remove(x,y)
	
	this.critter_loc_by_id[c.id] = [to_x,to_y]
	this.critters.set(to_x,to_y,c);
	
	this.emit('critter_set',to_x,to_y,critter)
	this.emit('change')
}

World.prototype.remove_critter = function(x,y) {
	c = this.critters.remove(x,y);
	delete this.critter_by_id[c.id];
	delete this.critter_loc_by_id[c.id];
	
	this.emit('critter_remove',x,y)
	this.emit('change')
}


var Ground = exports.Ground = function() {
	this.passable = true;
}



var Critter = exports.Critter = function(name) {

	Syncable.call(this)

	this.name = name;
	this.world = null;
	
}
util.inherits(Critter, Syncable)

Critter.prototype.toJSON = function() {
	obj = Syncable.prototype.toJSON.call(this);
	obj['name'] = this.name;
	loc = this.world.critter_loc_by_id[this.id]
	if (loc) {
		obj['x'] = loc[0]
		obj['y'] = loc[1]
	} else {
		obj['x'] = null
		obj['y'] = null
	}
	return obj;
}

Critter.prototype.up = function() {
	this.world.move_critter(this.x,this.y,this.x,this.y+1)
}

Critter.prototype.right = function() {
	this.world.move_critter(this.x,this.y,this.x+1,this.y)
}

Critter.prototype.down = function() {
	this.world.move_critter(this.x,this.y,this.x,this.y-1)
}

Critter.prototype.left = function() {
	this.world.move_critter(this.x,this.y,this.x-1,this.y)
}



var Player = exports.Player = function(name) {
	Critter.call(this);
}
util.inherits(Player, Critter)



