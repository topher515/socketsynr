MODULE_NAME = 'SocketSyncr (Client)';

shared = require('./shared')

var log = function(msg) {
	alert(MODULE_NAME + ': '+msg)
}

var SyncClient = this.SyncClient = function(host,options) {
	
	self = this;
	
	this.syncables = {};
	
	this.socket = new io.Socket(host,options);
	
	this.connect = function() {
		self.socket.connect();
	}
	
	/* Message handler */
	this.socket.on('message', function(message) {
		obj = JSON.parse(message);
		
		/* Handler generic events */
		if (obj[shared.SYNC_EVENT_]) {
			event = obj[shared.SYNC_EVENT_].shift() // First item is event
			listener = self.once[event]
			if (listener) {
				delete self.once[event]
			} else {
				listener = self.listeners[event]
			}
			if (listener) {
				listener.apply(listener,obj[shared.SYNC_EVENT_]) // Rest of items are args for event
			}
			
		/* Handle syncable objects events */
		} else if (obj[shared.SYNCABLE_EVENT_]) {
			
			sync_event = obj[shared.SYNCABLE_EVENT_];
			listener = self.server_syncable_listeners[sync_event];
			listener(obj['syncable'],obj['argument'])
			
		}
	})
	
	
	
	/* GENERIC SYNC EVENTS */
	
	this.listeners = {}
	this.once = {}
	this.on = function(event,listener) {
		self.listeners[event] = listener;
	}
	
	this.once = function(event,listener) {
		self.once[event] = listener;
	}
	
	this.emit = function(event,args) {
		args.unshift(event)
		obj = {}; obj[shared.SYNC_EVENT_] = args;
		self.socket.send(JSON.stringify(obj))
	}
	
	
	
	
	/* SYNCABLES */
	
	this.syncables = {}
	this.register = function(syncable) {
		
		// We'll use a temporary ID for this syncable until we get one from the server
		temp_id = shared.TEMP_ID_PREFIX_ + Math.random()
		self.syncables[temp_id] = syncable;
		self.syncable[sync_id_] = temp_id
		
		syncable.on('change',function() {
			self.socket.send(
				shared.build_syncable_event_message(shared.SYNCABLE_CHANGED_,syncable)
			)
		})
		
		self.on_server_syncable_event(shared.SERVER_SET_ID_,function(dummy_syncable,arguments) {
			// The server gave us an authoritative ID for this object. Save it.
			delete syncables[sync_id_];
			syncable[synd_id_] = arguments[0];
			syncables[arguments[0]] = syncable;
		})
		
		/* Ask the server for an authoritative id for this syncable */
		self.socket.send(
			shared.build_syncable_event_message(syncable_new_,syncable)
		)
		
	}
	
	this.deregister = function(syncable) {
		throw 'Not yet implemented!';
	}
	
	this.server_syncable_listeners = {}
	this.on_server_syncable_event = function(event,listener) {
		this.server_syncable_listeners[event].listener;
	}
	
}

