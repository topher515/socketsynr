MODULE_NAME = 'SocketSyncr (Shared)';

CLIENT_SIDE = Boolean(typeof(alert) == 'function');

if (CLIENT_SIDE) {
	var log = function(msg) {
		console.log(MODULE_NAME + ': '+msg)
	}
} else {
	var log = function(msg) {
		require('sys').puts(MODULE_NAME + ': '+msg)
	}
}

log('<-- Loading...')

var util = require('util'),
	events = require('events');

var sync_event_ = exports.SYNC_EVENT_ = 'sync_event_message_';

var syncable_event_ = exports.SYNCABLE_EVENT_ = 'syncable_event_'
var sync_id_ = exports.SYNC_ID_ = 'sync_id_';


var syncable_changed_ = exports.SYNCABLE_CHANGED_ = 'syncable_changed_';
var new_syncable_ = exports.NEW_SYNCABLE_ = 'new_syncable_';
var initial_syncables_ = exports.INITIAL_SYNCABLES_ = 'initial_syncables_';
var server_set_id_ = exports.SERVER_SET_ID_ = 'server_set_id_'



var temp_id_prefix = exports.TEMP_ID_PREFIX_ = 'temp-id--'


var Syncable = exports.Syncable = function() {
	
	events.EventEmitter.call(this);
	
	var self = this;
	
	this[sync_id_] = null;
	
}
util.inherits(Syncable,events.EventEmitter)

Syncable.prototype.toJSON = function() {
	obj = {}; 
	obj[sync_id_] = this[sync_id_];
	/*obj['constructor'] = this.constructor.toString();
	obj['prototype'] = {}
	for (i in this.constructor.prototype) {
		obj['prototype'][i] = this.constructor.prototype[i].toString()
	}*/
	return obj
}

var jsonify_syncable_obj = exports.jsonify_syncable_obj = function(syncable,full_sync) {
	
	obj = syncable.toJSON();
	
	
	if (full_sync) {
		
		obj['const_'] = syncable.constructor.toString();
		obj['proto_'] = {}
		for (i in syncable.constructor.prototype) {
			obj['proto_'][i] = syncable.constructor.prototype[i].toString()
		}
	}
	return obj;
}

var objectify_syncable_json = exports.objectify_syncable_json = function(syncable_json) {
	
	if (!syncable_json['const_'] || !syncable_json['proto_']) {
		throw("Trying to objectify a syncable without enough data.")
	}
	
	eval('SyncableConst = ' + syncable_json['const_']);
	for (i in syncable_json['proto_']) {
		eval('SyncableConst.prototype.' + i +' = ' + syncable_json['proto_'][i]);
	}
	syncable_obj = new SyncableConst();
	
	for (i in syncable_json) {
		if (i != 'const_' && i != 'proto_') {
			syncable_obj[i] = syncable_json[i];
		}
	}
	
	return syncable_obj;
}


var full_syncable_event_message = exports.full_syncable_event_message = function(event,syncable,arguments) {
	return JSON.stringify({syncable_event_:event,
			'syncable':jsonify_syncable_obj(syncable,true),
			'arguments':arguments
		})
}

var lite_syncable_event_message = exports.lite_syncable_event_message = function(event,syncable,arguments) {
	return JSON.stringify({syncable_event_:event,
			'syncable':jsonify_syncable_obj(syncable,false),
			'arguments':arguments
		})
}
